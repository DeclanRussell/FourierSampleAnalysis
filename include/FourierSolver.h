#ifndef FOURIERSOLVER_H
#define FOURIERSOLVER_H

//----------------------------------------------------------------------------------------------------------------------
/// @file FourierSolver.h
/// @class FourierSolver
/// @author Declan Russell
/// @date 16/12/2015
/// @version 1.0
/// @brief Class for performing fourier analysis on samples. This app will create a power spectrum image and possibly
/// @brief the radial mean of our power spectrum.
//----------------------------------------------------------------------------------------------------------------------

#include <QString>
#include <vector>
#include <QImage>
#include <cuda_runtime.h>
#include <helper_cuda.h>
#include <helper_math.h>
#include "FourierSolverKernals.h"

class FourierSolver
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default ctor
    //----------------------------------------------------------------------------------------------------------------------
    FourierSolver();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief defaut dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~FourierSolver();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief imports 2D points from file
    //----------------------------------------------------------------------------------------------------------------------
    void import2DFromFile(QString _dir);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief imports 2D differentials from file
    //----------------------------------------------------------------------------------------------------------------------
    void importDifferentialsFromFile(QString _dir);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief analysis our points to create our power spectrum
    //----------------------------------------------------------------------------------------------------------------------
    void analysePoints();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our 2D image of our power spectrum
    //----------------------------------------------------------------------------------------------------------------------
    inline QImage getPSImage(){return m_psImage;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to the resolution of our image
    /// @param _r - desired resolution of our image (int)
    //----------------------------------------------------------------------------------------------------------------------
    void setResolution(int _r);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to resolution of our image
    /// @return resolution of our image (int)
    //----------------------------------------------------------------------------------------------------------------------
    inline float getResolution(){return m_resolution;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to the range selection of our fourier analysis
    /// @param _r - desired range selection of our fourier analysis (float)
    //----------------------------------------------------------------------------------------------------------------------
    inline void setRangeSelection(float _r){m_rangeSelection = _r;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to the range selection of our fourier analysis
    /// @return range selection of our fourier analysis (float)
    //----------------------------------------------------------------------------------------------------------------------
    inline float getRangeSelection(){return m_rangeSelection;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to our standard deviation of our guassian function
    /// @return the standard deviation of our gaussian function (float)
    //----------------------------------------------------------------------------------------------------------------------
    inline float getStandardDeviation(){return sqrt(m_stanDevSqrd);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to our standard deviation
    /// @param _x - desired standard deviation (float)
    //----------------------------------------------------------------------------------------------------------------------
    inline void  setStandardDeviation(float _x){m_stanDevSqrd = _x*_x;}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our gausian kernal
    //----------------------------------------------------------------------------------------------------------------------
    float gausian(float2 _q, float2 _d);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our standar deviation squared used in our gausian kernal
    //----------------------------------------------------------------------------------------------------------------------
    float m_stanDevSqrd;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief array of our 2D points
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<float2> m_2DPoints;
    //----------------------------------------------------------------------------------------------------------------------
    /// @breif array of our pair-wise sample differentials.
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<float2> m_differentials;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our power spectrum image
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_psImage;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our probability distrobution histogram
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<float> m_pdf;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Resolution of our image
    //----------------------------------------------------------------------------------------------------------------------
    int m_resolution;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief range selection of our differentials
    //----------------------------------------------------------------------------------------------------------------------
    float m_rangeSelection;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of threads we have per block
    //----------------------------------------------------------------------------------------------------------------------
    int m_maxNumThreads;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our buffers on our GPU
    //----------------------------------------------------------------------------------------------------------------------
    FourierBuffers m_deviceBuffers;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our cuda stream
    //----------------------------------------------------------------------------------------------------------------------
    cudaStream_t m_stream;
    //----------------------------------------------------------------------------------------------------------------------
};

#endif // FOURIERSOLVER_H
